{"version":3,"sources":["reducers/ProductsReducer.js","store/index.js","components/HeaderComponent.js","components/SingleProductComponent.js","actions/index.js","components/ProductComponent.js","components/TableComponent.js","App.js","serviceWorker.js","index.js"],"names":["INITIAL_STATE","AddReducer","state","action","type","includes","payload","item","filter","product","reducers","combineReducers","products","ProductsReducer","store","createStore","HeaderComponent","className","Brand","React","Component","SingleProductComponent","added","addProduct","props","setState","removeProduct","this","md","key","id","Img","variant","src","image","Body","Title","name","onClick","ProductComponent","map","connect","TableComponent","span","offset","hover","price","condition","colour","description","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.2c517c2b.chunk.js","sourcesContent":["const INITIAL_STATE = [];\n\nconst AddReducer = (state = INITIAL_STATE, action) => {\n  switch (action.type) {\n    case \"ADD_PRODUCT\":\n      if (state.includes(action.payload)) return state;\n      return [...state, action.payload];\n    case \"REMOVE_PRODUCT\":\n      const item = action.payload;\n      return state.filter(product => product !== item);\n    default:\n      return state;\n  }\n};\n\nexport default AddReducer;\n","import { createStore, combineReducers } from \"redux\";\nimport ProductsReducer from \"../reducers/ProductsReducer.js\";\n\nconst reducers = combineReducers({\n  products: ProductsReducer\n});\n\nconst store = createStore(reducers);\n\nexport default store;\n","import React from \"react\";\nimport Navbar from \"react-bootstrap/Navbar\";\n\nclass HeaderComponent extends React.Component {\n  render() {\n    return (\n      <div>\n        <Navbar className=\"navbar\">\n          <Navbar.Brand>Compare Fruits</Navbar.Brand>\n        </Navbar>\n      </div>\n    );\n  }\n}\n\nexport default HeaderComponent;\n","import React from \"react\";\nimport Col from \"react-bootstrap/Col\";\nimport Card from \"react-bootstrap/Card\";\nimport Button from \"react-bootstrap/Button\";\n\nclass SingleProductComponent extends React.Component {\n  state = {\n    added: false\n  };\n\n  addProduct = product => {\n    this.props.addProduct(product);\n    this.setState({\n      added: true\n    });\n  };\n\n  removeProduct = product => {\n    this.props.removeProduct(product);\n    this.setState({\n      added: false\n    });\n  };\n\n  render() {\n    const product = this.props.product;\n    return (\n      <Col md={3} key={product.id}>\n        <Card className=\"card\">\n          <Card.Img variant=\"top\" src={`/images/${product.image}`} />\n          <Card.Body>\n            <Card.Title>{product.name}</Card.Title>\n            {this.state.added ? (\n              <Button\n                onClick={() => this.removeProduct(product)}\n                className=\"cardButton\"\n              >\n                Remove\n              </Button>\n            ) : (\n              <Button\n                onClick={() => this.addProduct(product)}\n                className=\"cardButton\"\n              >\n                Compare\n              </Button>\n            )}\n          </Card.Body>\n        </Card>\n      </Col>\n    );\n  }\n}\n\nexport default SingleProductComponent;\n","export const addProduct = product => {\n  return {\n    type: \"ADD_PRODUCT\",\n    payload: product\n  };\n};\n\nexport const removeProduct = product => {\n  return {\n    type: \"REMOVE_PRODUCT\",\n    payload: product\n  };\n};\n","import React from \"react\";\nimport { connect } from \"react-redux\";\n\nimport Container from \"react-bootstrap/Container\";\nimport Row from \"react-bootstrap/Row\";\n\nimport SingleProductComponent from \"./SingleProductComponent\";\n\nimport products from \"../products.json\";\nimport { addProduct, removeProduct } from \"../actions/index\";\n\nclass ProductComponent extends React.Component {\n  render() {\n    return (\n      <div>\n        <Container>\n          <Row>\n            {products.map(product => (\n              <SingleProductComponent\n                key={product.id}\n                product={product}\n                addProduct={this.props.addProduct}\n                removeProduct={this.props.removeProduct}\n              />\n            ))}\n          </Row>\n        </Container>\n      </div>\n    );\n  }\n}\n\nexport default connect(\n  null,\n  { addProduct, removeProduct }\n)(ProductComponent);\n","import React from \"react\";\nimport { connect } from \"react-redux\";\nimport { removeProduct } from \"../actions/index\";\nimport Col from \"react-bootstrap/Col\";\nimport Table from \"react-bootstrap/Table\";\n\nclass TableComponent extends React.Component {\n  removeProduct = product => {\n    this.props.removeProduct(product);\n  };\n\n  render() {\n    return (\n      <Col md={{ span: 10, offset: 1 }}>\n        <Table hover className=\"tableProducts\">\n          <thead>\n            <tr>\n              <th>#</th>\n              <th>Name</th>\n              <th>Price($)</th>\n              <th>Condition</th>\n              <th>Colour</th>\n              <th>Description</th>\n            </tr>\n          </thead>\n          <tbody>\n            {this.props.products.map(product => {\n              return (\n                <tr key={product.id}>\n                  <td>{product.id}</td>\n                  <td>{product.name}</td>\n                  <td>{product.price}</td>\n                  <td>{product.condition}</td>\n                  <td>{product.colour}</td>\n                  <td>{product.description}</td>\n                </tr>\n              );\n            })}\n          </tbody>\n        </Table>\n      </Col>\n    );\n  }\n}\n\nconst mapStateToProps = state => {\n  return {\n    products: state.products\n  };\n};\n\nexport default connect(\n  mapStateToProps,\n  { removeProduct }\n)(TableComponent);\n","import React from \"react\";\nimport HeaderComponent from \"./components/HeaderComponent\";\nimport ProductComponent from \"./components/ProductComponent\";\nimport TableComponent from \"./components/TableComponent\";\nimport \"./App.css\";\nimport Container from \"react-bootstrap/Container\";\nimport Row from \"react-bootstrap/Row\";\n\nfunction App() {\n  return (\n    <div>\n      <HeaderComponent />\n      <Container>\n        <br />\n        <Row>\n          <ProductComponent />\n        </Row>\n        <br />\n        <Row>\n          <TableComponent />\n        </Row>\n      </Container>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport store from \"./store\";\nimport { Provider } from \"react-redux\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"../node_modules/bootstrap/dist/css/bootstrap.min.css\";\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}